<?php

/**
 * @file
 * Provides a basic payment module implementation for Paymill
 */

define('COMMERCE_PAYMILL_BRIDGE', 'https://bridge.paymill.com/');
define('COMMERCE_PAYMILL_SERVER', 'https://api.paymill.de/v2/');
define('COMMERCE_PAYMILL_MODE_TEST', 'test');
define('COMMERCE_PAYMILL_MODE_LIVE', 'live');
define('COMMERCE_PAYMILL_CAPTURE_MODE_FULL', 'full');
define('COMMERCE_PAYMILL_CAPTURE_MODE_PREAUTH', 'preauth');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paymill_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_paymill'] = array(
    'title' => t('Credit/debit card (via Paymill)'),
    'description' => t('Provides credit card payment during checkout via Paymill.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_settings_form().
 */
function commerce_paymill_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'test' => array(
      'private_key' => '',
      'public_key' => '',
    ),
    'live' => array(
      'private_key' => '',
      'public_key' => '',
    ),
    'mode' => COMMERCE_PAYMILL_MODE_TEST,
    'capture_mode' => COMMERCE_PAYMILL_CAPTURE_MODE_FULL,
  );

  $form[COMMERCE_PAYMILL_MODE_TEST] = array(
    '#type' => 'fieldset',
    '#title' => t('Test keys'),
    '#collapsed' => FALSE,
  );
  $form[COMMERCE_PAYMILL_MODE_TEST]['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private test key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[COMMERCE_PAYMILL_MODE_TEST]['private_key'],
    '#required' => TRUE,
  );
  $form[COMMERCE_PAYMILL_MODE_TEST]['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public test key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[COMMERCE_PAYMILL_MODE_TEST]['public_key'],
    '#required' => TRUE,
  );

  $form[COMMERCE_PAYMILL_MODE_LIVE] = array(
    '#type' => 'fieldset',
    '#title' => t('Live keys'),
    '#collapsed' => FALSE,
  );
  $form[COMMERCE_PAYMILL_MODE_LIVE]['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private live key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[COMMERCE_PAYMILL_MODE_LIVE]['private_key'],
  );
  $form[COMMERCE_PAYMILL_MODE_LIVE]['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public test key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[COMMERCE_PAYMILL_MODE_LIVE]['public_key'],
  );

  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#options' => array(
      COMMERCE_PAYMILL_MODE_TEST => t('Test'),
      COMMERCE_PAYMILL_MODE_LIVE => t('Live'),
    ),
    '#default_value' => $settings['mode'],
  );
  
  $form['capture_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Capture mode'),
    '#options' => array(
      COMMERCE_PAYMILL_CAPTURE_MODE_FULL => t('Capture'),
      COMMERCE_PAYMILL_CAPTURE_MODE_PREAUTH => t('Pre-authorize only'),
    ),
    '#default_value' => $settings['capture_mode'],
  );

  return $form;
}

/**
 * Implements hook_menu().
 */
function commerce_paymill_menu() {
  $items = array();

  $items['admin/settings/commerce-paymill'] = array(
    'title' => 'Commerce Paymill Configuration',
    'description' => 'Configure the Commerce Paymill module',
    'page callback' => 'commerce_paymill_configure',
    'access arguments' => array('administer payment methods'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Redirect user to configuration page.
 */
function commerce_paymill_configure() {
  // Check Payment UI is enabled.
  if (!module_exists('commerce_payment_ui')) {
    $message = t('The Payment UI module is disabled - please enable it before configuring Commerce Paymill');
    drupal_set_message($message, 'warning');
    drupal_goto('admin/modules');
    return;
  }

  // Load default payment rule configuration.
  $rule = rules_config_load('commerce_payment_commerce_paymill');
  if (empty($rule)) {
    $message = t('The default payment rule configuration cannot be found');
    drupal_set_message($message, 'warning');
    drupal_goto('admin/commerce/config/payment-methods');
    return;
  }

  // Check first action for default payment rule configuration.
  $action = $rule->actions()->current();
  if (empty($action)) {
    $message = t('No actions exist for the default payment rule configuration');
    drupal_set_message($message, 'warning');
    $goto = sprintf(
      'admin/commerce/config/payment-methods/manage/%d',
      $rule->id
    );
    drupal_goto($goto);
    return;
  }

  // Redirect user to configuration page.
  $goto = sprintf(
    'admin/commerce/config/payment-methods/manage/%s/edit/%d',
    $rule->name,
    $action->elementId()
  );
  drupal_goto($goto);
}

/**
 * Payment method callback: submit form.
 */
function commerce_paymill_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $fields = array(
    'owner' => array(),
    'code' => array(),
  );
  $default = array();
  $form = commerce_payment_credit_card_form($fields, $default);

  // Render default form - will be inserted again using markup.
  // THIS IS A SECURITY MEASURE TO PREVENT CARD DETAILS BEING TRANSMITTED BACK!
  $markup = drupal_render($form['credit_card']);

  // Create new form with no existing fields.
  $form['credit_card'] = array(
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_payment') . '/theme/commerce_payment.theme.css'),
    ),
  );

  // Add fields as markup (with name attributes removed for security).
  $form['credit_card']['fields'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );

  // Get order total for order.
  $commerce_order_total = field_get_items('commerce_order', $order, 'commerce_order_total');
  $charge = $commerce_order_total[0];

  // Add hidden fields for amount/currency/Paymill token.
  $form['credit_card']['amount'] = array(
    '#type' => 'hidden',
    '#value' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
  );
  $form['credit_card']['currency'] = array(
    '#type' => 'hidden',
    '#value' => $charge['currency_code'],
  );
  $form['credit_card']['token'] = array(
    '#type' => 'hidden',
    '#required' => TRUE,
  );

  // Load Paymill bridge.
  $key = commerce_paymill_get_key($payment_method['settings'], 'public');
  $settings = array('publicKey' => $key);
  $form['credit_card']['#attached']['js'][] = COMMERCE_PAYMILL_BRIDGE;
  $form['credit_card']['#attached']['js'][] = array('data' => array('commercePaymill' => $settings), 'type' => 'setting');
  $form['credit_card']['#attached']['js'][] = drupal_get_path('module', 'commerce_paymill') . '/commerce_paymill.js';
  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_paymill_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if (empty($pane_values['credit_card']['token'])) {
    drupal_set_message(t('No Paymill token received. Your card has not been charged. Please enable JavaScript to complete your payment.'), 'error');
    return FALSE;
  }

  // Include Paymill libraries.
  libraries_load('paymill');

  // Get order total for order.
  $commerce_order_total = field_get_items('commerce_order', $order, 'commerce_order_total');

  // Get current API key
  $api_key = commerce_paymill_get_key($payment_method['settings']);
  
  // Get client ID  
  $client_id = commerce_paymill_get_client($order, $payment_method['settings']);
  if (!$client_id) return FALSE;

  // Create payment card
  $payment_params = array(
    'token' => $pane_values['credit_card']['token'],
    'client' => $client_id,
  );
  $payment_service = new Services_Paymill_Payments($api_key, COMMERCE_PAYMILL_SERVER);
  $payment = $payment_service->create($payment_params);
  if (isset($payment['error'])) {
	drupal_set_message(check_plain($payment['error']), 'error');
    return FALSE;
  }

  // Create transaction/preauth
  $transaction_params = array(
    'amount' => $commerce_order_total[0]['amount'],
    'currency' => $commerce_order_total[0]['currency_code'],
    'payment' => $payment['id'],
  );
  if ($payment_method['settings']['capture_mode'] == COMMERCE_PAYMILL_CAPTURE_MODE_PREAUTH)
  {
    $preauthorization_service = new Services_Paymill_Preauthorizations($api_key, COMMERCE_PAYMILL_SERVER);
    $transaction = $preauthorization_service->create($transaction_params);
  }
  else
  {
    $transaction_service = new Services_Paymill_Transactions($api_key, COMMERCE_PAYMILL_SERVER);
    $transaction_params['description'] = 'Order:' . $order->order_id;
    $transaction = $transaction_service->create($transaction_params);
  }

  // Need error checking for the transaction here!.
  if (isset($transaction['error'])) {
    drupal_set_message(check_plain($transaction['error']), 'error');
    return FALSE;
  }
}

function commerce_paymill_get_client($order, $settings) {
  global $user;

  // Does the current user already have a client instance?
  if (isset($user->data)) {
    if (isset($user->data['commerce_paymill_client_id'])) {
      return $user->data['commerce_paymill_client_id'];
	}
  }

  // Instantiate client service.
  $api_key = commerce_paymill_get_key($settings);
  $client_service = new Services_Paymill_Clients($api_key, COMMERCE_PAYMILL_SERVER);

  // Create client.
  $client_params = array(
    'email' => $order->mail,
    'description' => 'User:' . $order->uid,
  );  
  $client = $client_service->create($client_params);
  if (isset($client['error'])) {
	drupal_set_message(check_plain($client['error']), 'error');
    return FALSE;
  }

  // Update current user with client ID.
  if ($user->uid > 0) {
    $user->data['commerce_paymill_client_id'] = $client['id'];
    $edit = array('data' => $user->data);
    user_save($user, $edit);
  }

  return $client['id'];
}

/**
 * Get Paymill key from settings.
 */
function commerce_paymill_get_key($settings, $key = 'private') {
  $mode = $settings['mode'];
  $key = $settings[$mode][$key . '_key'];
  return $key;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_paymill_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_paymill'] = $pane_values;

  commerce_paymill_transaction($payment_method, $order, $charge);
}

/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param payment_method $payment_method
 *   The payment method instance object used to charge this payment.
 * @param order $order
 *   The order object the payment applies to.
 * @param charge $charge
 *   An array indicating the amount and currency code to charge.
 *
 * @return transaction
 *   A transaction representing the created payment
 */
function commerce_paymill_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_paymill', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * Implements hook_libraries_info().
 */
function commerce_paymill_libraries_info() {
  $libraries = array();

  $libraries['paymill'] = array(
    'name' => 'Paymill',
    'vendor' => 'http://www.paymill.com/',
    'download_url' => 'https://github.com/Paymill/Paymill-PHP/archive/master.zip',
    'path' => 'lib/Services/Paymill',
    'version arguments' => array(
      'file' => 'lib/Services/Paymill/Apiclient/Curl.php',
      'pattern' => '@Paymill-php/([0-9\.]+)@',
      'lines' => 40,
    ),
    'files' => array(
      'php' => array(
        'Clients.php',
        'Coupons.php',
        'Exception.php',
        'Offers.php',
        'Payments.php',
        'Preauthorizations.php',
        'Refunds.php',
        'Subscriptions.php',
        'Transactions.php',
      ),
    ),
  );

  return $libraries;
}
